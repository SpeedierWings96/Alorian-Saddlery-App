#ifndef custom_char_traits_h
#define custom_char_traits_h

#include <string>
#include <vector>

namespace alorian_traits {
  template<class T>
  struct char_traits : std::char_traits<T> {};

  template<>
  struct char_traits<unsigned char> {
      using char_type = unsigned char;
      using int_type = int;
      using off_type = std::streamoff;
      using pos_type = std::streampos;
      using state_type = std::mbstate_t;

      static void assign(char_type& r, const char_type& a) { r = a; }
      static bool eq(const char_type& a, const char_type& b) { return a == b; }
      static bool lt(const char_type& a, const char_type& b) { return a < b; }

      static int compare(const char_type* s1, const char_type* s2, std::size_t n) {
          for (std::size_t i = 0; i < n; ++i) {
              if (s1[i] < s2[i]) return -1;
              if (s1[i] > s2[i]) return 1;
          }
          return 0;
      }

      static std::size_t length(const char_type* s) {
          std::size_t i = 0;
          while (s[i] != 0) ++i;
          return i;
      }

      static const char_type* find(const char_type* s, std::size_t n, const char_type& a) {
          for (std::size_t i = 0; i < n; ++i) {
              if (s[i] == a) return s + i;
          }
          return nullptr;
      }

      static char_type* move(char_type* s1, const char_type* s2, std::size_t n) {
          return reinterpret_cast<char_type*>(std::memmove(s1, s2, n));
      }

      static char_type* copy(char_type* s1, const char_type* s2, std::size_t n) {
          return reinterpret_cast<char_type*>(std::memcpy(s1, s2, n));
      }

      static char_type* assign(char_type* s, std::size_t n, char_type a) {
          std::memset(s, a, n);
          return s;
      }

      static int_type not_eof(const int_type& c) { return c != eof() ? c : 0; }
      static char_type to_char_type(const int_type& c) { return static_cast<char_type>(c); }
      static int_type to_int_type(const char_type& c) { return static_cast<int_type>(c); }
      static bool eq_int_type(const int_type& c1, const int_type& c2) { return c1 == c2; }
      static int_type eof() { return EOF; }
  };
}
#endif /* custom_char_traits_h */ 